name: .NET

on:
  push:    
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./Forums"
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Upload build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Artifact for Build job results
        path: bin/ 
        retention-days: 7
  
  test:
    needs: [build]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./Forums.Test"
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore /p:ContinuousIntegrationBuild=true
      - name: Run tests with coverage
        run: dotnet test --no-build --collect:"XPlat Code Coverage"
      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5
        with:
          reports: 'Forums.Test/TestResults/**/coverage.cobertura.xml'
          targetdir: 'CoverageReports'
          reporttypes: 'HtmlInline;Cobertura'
          verbosity: 'Verbose'
          toolpath: 'reportgeneratortool'
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: CoverageReports        
          path: CoverageReports
  
  upload-to-codecov:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: List files
        run: cd CoverageReports && ls && cd ..
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: CoverageReports/Cobertura.xml
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true

  Docker:
    name: builds and deploy to DockerHub
    needs: [build, test]
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Forums/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/forums:latest
    
  deploy-to-minikube:
    needs:  [DockerHub-actions]
    runs-on: ubuntu-latest
    name: build and deploy to minikube
    steps:
    - uses: actions/checkout@v2
    - name: Start minikube
      uses: medyagh/setup-minikube@master
    - name: Try the cluster !
      run: kubectl get pods -A
    - name: Build image
      run: |
        export SHELL=/bin/bash
        eval $(minikube -p minikube docker-env)
        docker build -f ./Forums/Dockerfile -t markgoertz/forums .
        echo -n "verifying images:"
        docker images        
    - name: Deploy to minikube
      run:
        kubectl apply -f k8s/deploy-to-minikube.yaml
    - name: Test service URLs
      run: |
        minikube service list
        minikube service example --url
        echo "------------------opening the service------------------"
        curl $(minikube service example --url)   